package com.macquarie.analytics;

import org.json.JSONObject;

import com.google.api.services.analytics.Analytics;
import com.google.api.services.analytics.model.GaData;
import com.google.api.services.analytics.model.GaData.ColumnHeaders;

import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonWriter;


public class getGAData {

	public static String getGAData(String product_Id) throws ClassNotFoundException, UnsupportedEncodingException, SQLException{
		
		String completeGAData = "";
		Connection conn = CreateConnection.createConnection();		

	      Analytics analytics = HelloAnalytics.initializeAnalytics();

	      String profile = HelloAnalytics.getFirstProfileId(analytics);
	      System.out.println("First Profile Id: "+ profile);
	      String table_id = "ga:"+profile;	      	      	      
	     
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			Calendar cal = Calendar.getInstance();
			System.out.println(dateFormat.format(cal.getTime()));

			cal.add(Calendar.DAY_OF_MONTH, -1);
			String endDate = dateFormat.format(cal.getTime());
			
			cal.add(Calendar.DAY_OF_MONTH, -7);
			String startDate = dateFormat.format(cal.getTime());
			
			String Product_URL = "";
			String Product_Name = "";
			String Product_CTA = "";

			ResultSet rs = conn.createStatement().executeQuery("SELECT Product_URL,Product_Name, Product_CTA FROM analytics.Product_Details_1 where ID='"+product_Id+"';");


			while(rs.next()){

				Product_URL = rs.getString(1);
				Product_Name = rs.getString(2);
				Product_CTA = rs.getString(3);
			}

			
			
	      GaData gaDataScreenSizes = GetScreenSizes.executeScreenSizesDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaDataScreenSizesString =  printJSONDataTable(gaDataScreenSizes);     
	 
	      GaData gaDataDevices = GetDevices.executeDevicesDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaDataDevicesString =  printJSONDataTable(gaDataDevices); 
	      
	      GaData gaDataTime = GetTime.executeTimeDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaDataTimeString =  printJSONDataTable(gaDataTime);
	 
	      GaData gaReturningNew = GetReturningNew.executeReturnNewDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaReturningNewString =   printJSONDataTable(gaReturningNew);
	            
	      GaData gaGeneralData = GetGeneralData.executeGeneralDataDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaGeneralDataString =  printJSONDataTable(gaGeneralData);
	      
	      GaData gaReferralData = GetReferralData.executeReferralDataQuery(analytics, table_id, startDate, endDate, Product_URL);
	      String gaReferralDataString =   printJSONDataTable(gaReferralData);
	      
	      
	      
	      return allGAData;
	      
	      
	    
		
		
		return completeGAData;
	}
	
	public static JsonObject createImageJSON(String gaDataScreenSizesString, String gaDataDevicesString, String gaDataTimeString, String gaReturningNewString, String gaGeneralDataString, String gaReferralDataString ){
		

		
		JsonObject personObject = Json.createObjectBuilder()
				.add("GetScreenSizes", gaDataScreenSizesString)
				.add("GetDevices", gaDataDevicesString)
				.add("GetTime", gaDataTimeString)
				.add("GetReturningNew", gaReturningNewString)
				.add("GetGeneralData", gaGeneralDataString)
				.add("GetReferralData", gaReferralDataString)
				.build();

		return personObject;
	}
	
	private static String printJSONDataTable(GaData gaData) {

		Collection headers = new ArrayList();
		Collection datarows = new ArrayList();	
		if (gaData.getTotalResults() > 0) {
			// Print the column names.
			for (ColumnHeaders header : gaData.getColumnHeaders()) {
				headers.add(header.getName());
			}

			
			// Print the rows of data.
			for (List<String> rowValues : gaData.getRows()) {
				for (String value : rowValues) {
					
					datarows.add(value);
					
				}

			}
		} else {

			datarows.add("No Data");	
		}

		
		Collection compeleteDataSet = new ArrayList(); 
		compeleteDataSet.add(headers);
		compeleteDataSet.add(datarows);
		return compeleteDataSet.toString();
	}
	
	
	

}



